import React, { useState, useEffect } from 'react';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// Analytics Tab Component for EmotionalChain
export default function Analytics() {
  const [activeTab, setActiveTab] = useState('network');
  const [networkData, setNetworkData] = useState({
    emotionalIntelligence: {
      networkStress: 32,
      networkEnergy: 78,
      networkFocus: 65,
      emotionalVolatility: 15,
      consensusStability: 92
    },
    trends: [
      { time: '00:00', stress: 28, energy: 82, focus: 70, consensus: 94 },
      { time: '04:00', stress: 22, energy: 85, focus: 75, consensus: 96 },
      { time: '08:00', stress: 45, energy: 70, focus: 60, consensus: 88 },
      { time: '12:00', stress: 52, energy: 65, focus: 55, consensus: 85 },
      { time: '16:00', stress: 38, energy: 75, focus: 68, consensus: 90 },
      { time: '20:00', stress: 32, energy: 78, focus: 65, consensus: 92 }
    ]
  });

  const [validatorAnalytics, setValidatorAnalytics] = useState({
    performanceDistribution: [
      { category: 'High Performers', count: 12, percentage: 35 },
      { category: 'Stable Contributors', count: 18, percentage: 53 },
      { category: 'Inconsistent', count: 4, percentage: 12 }
    ],
    emotionalConsistency: [
      { validator: 'Validator_001', consistency: 94, rewards: 1250 },
      { validator: 'Validator_002', consistency: 91, rewards: 1180 },
      { validator: 'Validator_003', consistency: 89, rewards: 1120 },
      { validator: 'Validator_004', consistency: 86, rewards: 1050 },
      { validator: 'Validator_005', consistency: 83, rewards: 980 }
    ]
  });

  const [economicMetrics, setEconomicMetrics] = useState({
    tokenDistribution: [
      { category: 'Validator Rewards', value: 450000, percentage: 45 },
      { category: 'Staking Pool', value: 300000, percentage: 30 },
      { category: 'Development Fund', value: 150000, percentage: 15 },
      { category: 'Community Grants', value: 100000, percentage: 10 }
    ],
    rewardTrends: [
      { period: 'Week 1', totalRewards: 8500, avgReward: 250 },
      { period: 'Week 2', totalRewards: 9200, avgReward: 271 },
      { period: 'Week 3', totalRewards: 8800, avgReward: 259 },
      { period: 'Week 4', totalRewards: 9500, avgReward: 279 }
    ]
  });

  const [predictiveAnalytics, setPredictiveAnalytics] = useState({
    consensusProjection: [
      { period: 'Current', rate: 92, confidence: 100 },
      { period: '+1 Week', rate: 94, confidence: 85 },
      { period: '+2 Weeks', rate: 95, confidence: 78 },
      { period: '+1 Month', rate: 96, confidence: 65 },
      { period: '+3 Months', rate: 97, confidence: 45 }
    ],
    networkGrowth: {
      currentValidators: 34,
      projectedValidators: 67,
      growthRate: 15.2,
      confidenceLevel: 82
    }
  });

  const COLORS = ['#00ff00', '#00ffff', '#ffff00', '#ff6b6b', '#4ecdc4'];

  const NetworkIntelligence = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-gray-900 border border-green-500 rounded-lg p-6">
          <h3 className="text-green-400 text-lg font-semibold mb-4">Network Emotional Health</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Network Stress</span>
              <span className="text-red-400 font-bold">{networkData.emotionalIntelligence.networkStress}%</span>
            </div>
            <div className="w-full bg-gray-800 rounded-full h-2">
              <div 
                className="bg-red-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${networkData.emotionalIntelligence.networkStress}%` }}
              />
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Network Energy</span>
              <span className="text-yellow-400 font-bold">{networkData.emotionalIntelligence.networkEnergy}%</span>
            </div>
            <div className="w-full bg-gray-800 rounded-full h-2">
              <div 
                className="bg-yellow-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${networkData.emotionalIntelligence.networkEnergy}%` }}
              />
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Network Focus</span>
              <span className="text-blue-400 font-bold">{networkData.emotionalIntelligence.networkFocus}%</span>
            </div>
            <div className="w-full bg-gray-800 rounded-full h-2">
              <div 
                className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${networkData.emotionalIntelligence.networkFocus}%` }}
              />
            </div>
          </div>
        </div>

        <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6">
          <h3 className="text-cyan-400 text-lg font-semibold mb-4">Consensus Stability</h3>
          <div className="text-center">
            <div className="text-4xl font-bold text-cyan-400 mb-2">
              {networkData.emotionalIntelligence.consensusStability}%
            </div>
            <div className="text-gray-400 text-sm">Average Success Rate</div>
            <div className="mt-4 text-green-400 text-sm">
              ↑ +2.3% from last week
            </div>
          </div>
        </div>

        <div className="bg-gray-900 border border-yellow-500 rounded-lg p-6">
          <h3 className="text-yellow-400 text-lg font-semibold mb-4">Emotional Volatility</h3>
          <div className="text-center">
            <div className="text-4xl font-bold text-yellow-400 mb-2">
              {networkData.emotionalIntelligence.emotionalVolatility}%
            </div>
            <div className="text-gray-400 text-sm">Volatility Index</div>
            <div className="mt-4 text-green-400 text-sm">
              ↓ -1.8% (Improving)
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-900 border border-green-500 rounded-lg p-6">
        <h3 className="text-green-400 text-lg font-semibold mb-4">24-Hour Emotional Trends</h3>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={networkData.trends}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="time" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1F2937', 
                  border: '1px solid #10B981',
                  borderRadius: '8px'
                }}
              />
              <Line type="monotone" dataKey="stress" stroke="#EF4444" strokeWidth={2} />
              <Line type="monotone" dataKey="energy" stroke="#F59E0B" strokeWidth={2} />
              <Line type="monotone" dataKey="focus" stroke="#3B82F6" strokeWidth={2} />
              <Line type="monotone" dataKey="consensus" stroke="#10B981" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );

  const ValidatorAnalytics = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-gray-900 border border-green-500 rounded-lg p-6">
          <h3 className="text-green-400 text-lg font-semibold mb-4">Validator Performance Distribution</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={validatorAnalytics.performanceDistribution}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={100}
                  paddingAngle={5}
                  dataKey="count"
                >
                  {validatorAnalytics.performanceDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="mt-4 space-y-2">
            {validatorAnalytics.performanceDistribution.map((item, index) => (
              <div key={index} className="flex items-center justify-between">
                <div className="flex items-center">
                  <div 
                    className="w-3 h-3 rounded-full mr-2"
                    style={{ backgroundColor: COLORS[index] }}
                  />
                  <span className="text-gray-300 text-sm">{item.category}</span>
                </div>
                <span className="text-gray-400 text-sm">{item.percentage}%</span>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6">
          <h3 className="text-cyan-400 text-lg font-semibold mb-4">Top Validator Performance</h3>
          <div className="space-y-4">
            {validatorAnalytics.emotionalConsistency.map((validator, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-cyan-500 rounded-full flex items-center justify-center text-black font-bold text-sm mr-3">
                    {index + 1}
                  </div>
                  <div>
                    <div className="text-gray-300 font-medium">{validator.validator}</div>
                    <div className="text-gray-500 text-sm">Consistency: {validator.consistency}%</div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-green-400 font-bold">{validator.rewards}</div>
                  <div className="text-gray-500 text-sm">EMOTION</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="bg-gray-900 border border-yellow-500 rounded-lg p-6">
        <h3 className="text-yellow-400 text-lg font-semibold mb-4">Validator Behavior Patterns</h3>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={validatorAnalytics.emotionalConsistency}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="validator" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1F2937', 
                  border: '1px solid #F59E0B',
                  borderRadius: '8px'
                }}
              />
              <Bar dataKey="consistency" fill="#F59E0B" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );

  const EconomicInsights = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-gray-900 border border-green-500 rounded-lg p-6">
          <h3 className="text-green-400 text-lg font-semibold mb-4">Token Distribution</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={economicMetrics.tokenDistribution}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={100}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {economicMetrics.tokenDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="mt-4 space-y-2">
            {economicMetrics.tokenDistribution.map((item, index) => (
              <div key={index} className="flex items-center justify-between">
                <div className="flex items-center">
                  <div 
                    className="w-3 h-3 rounded-full mr-2"
                    style={{ backgroundColor: COLORS[index] }}
                  />
                  <span className="text-gray-300 text-sm">{item.category}</span>
                </div>
                <span className="text-gray-400 text-sm">{item.value.toLocaleString()} EMOTION</span>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6">
          <h3 className="text-cyan-400 text-lg font-semibold mb-4">Reward Trends</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={economicMetrics.rewardTrends}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="period" stroke="#9CA3AF" />
                <YAxis stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1F2937', 
                    border: '1px solid #06B6D4',
                    borderRadius: '8px'
                  }}
                />
                <Area type="monotone" dataKey="totalRewards" stroke="#06B6D4" fill="#06B6D4" fillOpacity={0.3} />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-gray-900 border border-yellow-500 rounded-lg p-6 text-center">
          <div className="text-yellow-400 text-2xl font-bold mb-2">2.3M</div>
          <div className="text-gray-400 text-sm">Total EMOTION Circulating</div>
        </div>
        <div className="bg-gray-900 border border-green-500 rounded-lg p-6 text-center">
          <div className="text-green-400 text-2xl font-bold mb-2">$4.67</div>
          <div className="text-gray-400 text-sm">Current Token Price</div>
        </div>
        <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6 text-center">
          <div className="text-cyan-400 text-2xl font-bold mb-2">$10.7M</div>
          <div className="text-gray-400 text-sm">Network Market Cap</div>
        </div>
      </div>
    </div>
  );

  const PredictiveAnalytics = () => (
    <div className="space-y-6">
      <div className="bg-gray-900 border border-green-500 rounded-lg p-6">
        <h3 className="text-green-400 text-lg font-semibold mb-4">Consensus Rate Projection</h3>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={predictiveAnalytics.consensusProjection}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="period" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1F2937', 
                  border: '1px solid #10B981',
                  borderRadius: '8px'
                }}
              />
              <Line type="monotone" dataKey="rate" stroke="#10B981" strokeWidth={3} />
              <Line type="monotone" dataKey="confidence" stroke="#F59E0B" strokeWidth={2} strokeDasharray="5 5" />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6">
          <h3 className="text-cyan-400 text-lg font-semibold mb-4">Network Growth Prediction</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Current Validators</span>
              <span className="text-cyan-400 font-bold">{predictiveAnalytics.networkGrowth.currentValidators}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Projected (3 months)</span>
              <span className="text-green-400 font-bold">{predictiveAnalytics.networkGrowth.projectedValidators}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Growth Rate</span>
              <span className="text-yellow-400 font-bold">{predictiveAnalytics.networkGrowth.growthRate}%</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Confidence Level</span>
              <span className="text-blue-400 font-bold">{predictiveAnalytics.networkGrowth.confidenceLevel}%</span>
            </div>
          </div>
        </div>

        <div className="bg-gray-900 border border-yellow-500 rounded-lg p-6">
          <h3 className="text-yellow-400 text-lg font-semibold mb-4">Key Predictions</h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
              <span className="text-gray-300 text-sm">Network Stress Reduction</span>
              <span className="text-green-400 font-bold">-15% (3 months)</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
              <span className="text-gray-300 text-sm">Energy Level Improvement</span>
              <span className="text-yellow-400 font-bold">+12% (3 months)</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
              <span className="text-gray-300 text-sm">Focus Enhancement</span>
              <span className="text-blue-400 font-bold">+8% (3 months)</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
              <span className="text-gray-300 text-sm">Token Value Projection</span>
              <span className="text-cyan-400 font-bold">$7.20 (6 months)</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const ExportData = () => {
    const exportAnalytics = (format: string) => {
      const data = {
        networkData,
        validatorAnalytics,
        economicMetrics,
        predictiveAnalytics,
        exportTime: new Date().toISOString()
      };
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `emotionalchain-analytics-${Date.now()}.${format}`;
      a.click();
    };

    return (
      <div className="space-y-6">
        <div className="bg-gray-900 border border-green-500 rounded-lg p-6">
          <h3 className="text-green-400 text-lg font-semibold mb-4">Export Analytics Data</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button 
              onClick={() => exportAnalytics('json')}
              className="bg-green-500 hover:bg-green-600 text-black font-bold py-2 px-4 rounded transition-colors"
            >
              Export as JSON
            </button>
            <button 
              onClick={() => exportAnalytics('csv')}
              className="bg-cyan-500 hover:bg-cyan-600 text-black font-bold py-2 px-4 rounded transition-colors"
            >
              Export as CSV
            </button>
          </div>
        </div>

        <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6">
          <h3 className="text-cyan-400 text-lg font-semibold mb-4">Research Data Access</h3>
          <p className="text-gray-400 mb-4">
            Anonymized emotional consensus data available for academic research purposes.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button className="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-2 px-4 rounded transition-colors">
              Request Research Access
            </button>
            <button className="bg-blue-500 hover:bg-blue-600 text-black font-bold py-2 px-4 rounded transition-colors">
              Academic Partnership
            </button>
          </div>
        </div>
      </div>
    );
  };

  const tabs = [
    { id: 'network', label: 'Network Intelligence', component: NetworkIntelligence },
    { id: 'validators', label: 'Validator Analytics', component: ValidatorAnalytics },
    { id: 'economic', label: 'Economic Insights', component: EconomicInsights },
    { id: 'predictive', label: 'Predictive Analytics', component: PredictiveAnalytics },
    { id: 'export', label: 'Export & Research', component: ExportData }
  ];

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-green-400 mb-2">EmotionalChain Analytics</h1>
          <p className="text-gray-400">Comprehensive business intelligence and network insights for the emotion-driven blockchain economy</p>
        </div>

        <div className="flex flex-wrap gap-2 mb-6">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                activeTab === tab.id
                  ? 'bg-green-500 text-black'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        <div className="animate-fadeIn">
          {tabs.find(tab => tab.id === activeTab)?.component()}
        </div>
      </div>
    </div>
  );
}